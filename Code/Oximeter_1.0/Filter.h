/*
 * This file includes the filter functions
 */
#define filter 1

#ifndef constant
#include "Constant.h"
#endif


//filter sample01:Bandpass, Chebyshv II, MinOrder(26, section 13), Match Stopband,
//Hz, Fs50, 0.5, 0.66, 8, 12, 
//dB, 60, 1, 80

const int numOrder = 31;
float Coeffs_sample02[numOrder] =
{
   -0.03928569141863, -0.04209698304048, -0.03306544563932, -0.01663023572165,
  -0.002245081324707,                 0, -0.01515177858799,  -0.0442421546351,
   -0.07500656587427, -0.09064389002592, -0.07694287806338, -0.02923131710569,
    0.04408499181657,   0.1233101812438,   0.1841963215111,   0.2070140922819,
     0.1841963215111,   0.1233101812438,  0.04408499181657, -0.02923131710569,
   -0.07694287806338, -0.09064389002592, -0.07500656587427,  -0.0442421546351,
   -0.01515177858799,                 0,-0.002245081324707, -0.01663023572165,
   -0.03306544563932, -0.04209698304048, -0.03928569141863
};




float RED_store[numOrder] = {};
float NIR_store[numOrder] = {};


float FIRfilter(
  float input,
  float *pCoeffs,
  float Xn_store[]
);

float FIRfilter(
  float input,
  float *pCoeffs,
  float Xn_store[]
)
{
  float Yn = 0;
  for(int i = numOrder - 1; i > 0; i--){
    Xn_store[i] = Xn_store[i-1];
    Yn += Xn_store[i] * pCoeffs[i];
  }
  Xn_store[0] = input;
  Yn += Xn_store[0] * pCoeffs[0];

  return Yn;
}

//Lowpass, FIR Window, Order: 50
//Window: Chebyshev, SA: 100
//(Hz) Fs: 50, Fc: 6

const int numOrder_lowpass = 51;
double Coeffs_sample01[numOrder_lowpass] =
{
  -0.000000000000000000003825568708381899072,
  -0.000010637248159455888678152912785179751,
  -0.00003797550215077023289715965614909976 ,
  -0.000062290143498264880926769404556608833,
  -0.000019557365700427181400217549467335232,
   0.000164855343924971096134304837654838138,
   0.000468147068863967834306816229172909516,
   0.0006530754848097363330500231271003031  ,
   0.000300365195617509090492136536454381712,
  -0.000879009357469063613323145833788885284,
  -0.002547376219076948489911105255600887176,
  -0.003469617767199464474642267575177356775,
  -0.001976975968455640508131265775659812789,
   0.00271624609403803892598849856199194619 ,
   0.009022720457676535257829364411463757278,
   0.012640496042371532695036684401657112176,
   0.008441111651520371780832441288566769799,
  -0.005700486207983689566913820812033009133,
  -0.025228103625192749986938522965829179157,
  -0.03833223614993083727675582395022502169 ,
  -0.030257695865260340190028287565837672446,
   0.00870948252261139616026142107330088038 ,
   0.075766540456080888610301826702198013663,
   0.1535699908613205044716210068145301193  ,
   0.216069121562175253670190500088210683316,
   0.239999617358133743305614871133002452552,
   0.216069121562175253670190500088210683316,
   0.1535699908613205044716210068145301193  ,
   0.075766540456080888610301826702198013663,
   0.00870948252261139616026142107330088038 ,
  -0.030257695865260340190028287565837672446,
  -0.03833223614993083727675582395022502169 ,
  -0.025228103625192749986938522965829179157,
  -0.005700486207983689566913820812033009133,
   0.008441111651520371780832441288566769799,
   0.012640496042371532695036684401657112176,
   0.009022720457676535257829364411463757278,
   0.00271624609403803892598849856199194619 ,
  -0.001976975968455640508131265775659812789,
  -0.003469617767199464474642267575177356775,
  -0.002547376219076948489911105255600887176,
  -0.000879009357469063613323145833788885284,
   0.000300365195617509090492136536454381712,
   0.0006530754848097363330500231271003031  ,
   0.000468147068863967834306816229172909516,
   0.000164855343924971096134304837654838138,
  -0.000019557365700427181400217549467335232,
  -0.000062290143498264880926769404556608833,
  -0.00003797550215077023289715965614909976 ,
  -0.000010637248159455888678152912785179751,
  -0.000000000000000000003825568708381899072
};



float RED_store_lowpass[numOrder_lowpass] = {};
float NIR_store_lowpass[numOrder_lowpass] = {};

float FIRfilter_lowpass(
  float input,
  float *pCoeffs,
  float Xn_store_lowpass[]
);

float FIRfilter_lowpass(
  float input,
  float *pCoeffs,
  float Xn_store_lowpass[]
)
{
  float Yn = 0;
  for(int i = numOrder_lowpass - 1; i > 0;){
    Xn_store_lowpass[i] = Xn_store_lowpass[i-1];
    Yn += Xn_store_lowpass[i] * pCoeffs[i];
    i--;
  };
  Xn_store_lowpass[0] = input;
  Yn += Xn_store_lowpass[0] * pCoeffs[0];

  return Yn;
}
